erdiagram RCModels_Crowsfoot
notation=crowsfoot

// Entities
entity Customer {
    customer_id: INTEGER key
    first_name: VARCHAR(100)
    last_name: VARCHAR(100)
    address: TEXT
    dob: DATE
    gender: VARCHAR(10)
    phone: VARCHAR(20)
    email: VARCHAR(100)
    source: VARCHAR(100) // e.g., 'subscribers', 'web', 'referral'
}

entity Product {
    product_id: INTEGER key
    name: VARCHAR(200)
    description: TEXT
    scale: VARCHAR(20)
    min_order_qty: INTEGER
    reorder_level: INTEGER
    inventory_qty: INTEGER
    status: VARCHAR(20) // active / inactive / scrapped
}

entity ProductCategory {
    category_id: INTEGER key
    category_name: VARCHAR(100)
}

// associative entity for many-to-many Product <-> ProductCategory
entity ProductCategoryAssign {
    product_id: INTEGER key
    category_id: INTEGER key
}

entity Manufacturer {
    manufacturer_id: INTEGER key
    name: VARCHAR(200)
    address: TEXT
    phone: VARCHAR(20)
    zip_code: VARCHAR(20)
    city: VARCHAR(100)
}

entity Invoice {
    invoice_id: INTEGER key
    invoice_date: DATE
    total_price: DECIMAL(12,2)
    payment_condition: VARCHAR(50)
    shipment_condition: VARCHAR(50)
    shipment_date: DATE
}

entity InvoiceLine {
    invoiceline_id: INTEGER key
    invoice_id: INTEGER
    product_id: INTEGER
    quantity: INTEGER
    line_price: DECIMAL(12,2)
}

entity OrderEntity {
    order_id: INTEGER key
    order_date: DATE
    total_price: DECIMAL(12,2)
    payment_condition: VARCHAR(50)
    received_date: DATE
    manufacturer_id: INTEGER
}

entity OrderLine {
    orderline_id: INTEGER key
    order_id: INTEGER
    product_id: INTEGER
    quantity: INTEGER
    unit_price: DECIMAL(12,2)
}

entity Campaign {
    campaign_id: INTEGER key
    campaign_name: VARCHAR(200)
    start_date: DATE
    end_date: DATE
}

entity Customer_Campaign {
    customer_id: INTEGER key
    campaign_id: INTEGER key
    participation_date: DATE
    response: VARCHAR(200)
}

// Relationships (Crow's Foot notation with participation)
relationship CustomerInvoice {
    Customer[1 | "customer"] -> Invoice[0..N | "invoice"]
    // One Customer may generate zero or more Invoices. Each Invoice is generated by exactly one Customer.
}

relationship InvoiceInvoiceLine {
    Invoice[1 | "invoice"] -> InvoiceLine[1..N | "line"]
    // Each Invoice must include at least one InvoiceLine. Each InvoiceLine belongs to exactly one Invoice.
}

relationship InvoiceLineProduct {
    InvoiceLine[1 | "invoice_line"] -> Product[1 | "product"]
    // Each InvoiceLine includes exactly one Product. A Product may appear in zero or more InvoiceLines.
}

relationship ManufacturerProduct {
    Manufacturer[1 | "manufacturer"] -> Product[0..N | "product"]
    // A Manufacturer may supply zero or more Products. Each Product is supplied by exactly one Manufacturer.
}

relationship OrderOrderLine {
    OrderEntity[1 | "order"] -> OrderLine[1..N | "order_line"]
    // Each Order must contain at least one OrderLine. Each OrderLine belongs to exactly one Order.
}

relationship OrderManufacturer {
    OrderEntity[1 | "order"] -> Manufacturer[1 | "manufacturer"]
    // Each Order is placed with exactly one Manufacturer. A Manufacturer may receive zero or more Orders.
}

relationship OrderLineProduct {
    OrderLine[1 | "orderline"] -> Product[1 | "product"]
    // Each OrderLine references exactly one Product.
}

relationship ProductCategoryRel {
    Product[0..N | "product"] -> ProductCategory[0..N | "category"]
    // Products and ProductCategories have a many-to-many relationship. Implemented via ProductCategoryAssign if attributes on the association are required.
}

relationship CustomerCampaignRel {
    Customer[0..N | "customer"] -> Customer_Campaign[0..N | "participation"]
}

relationship CampaignParticipation {
    Campaign[1 | "campaign"] -> Customer_Campaign[0..N | "participant"]
    // Use Customer_Campaign as associative entity to store participation details.
}

/* Operational rules (not enforced by ER diagram but documented):
   - Back orders are not charged until the order is shipped.
   - Orders are automatically placed when Product.inventory_qty <= reorder_level; ordered quantity is product.min_order_qty.
   - If a Product has no sales within 4 weeks of being stocked, it will be flagged inactive or scrapped.
   - Credit card processing (CC Bank) is handled externally and not modeled here unless Payment entity is added.
*/

 